from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from days import current_date
from google_calendar import check_free_space as cfs
from translate import translate_button as trl


def first_choice(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'‚úèÔ∏è {trl(language, "–ó–∞–ø")}', callback_data='entry:make')
            ],
            [
                InlineKeyboardButton(text=f'üìÇ {trl(language, "–ú–∑–∞–ø")}', callback_data="my_entry:my"),
                InlineKeyboardButton(text=f'üóëÔ∏è {trl(language, "–£–∑–∞–ø")}', callback_data="my_entry:delete"),
            ],
            [
                InlineKeyboardButton(text=f'{trl(language, "–Ø–∑—ã–∫")}',
                                     callback_data=f'language:{"ru" if language else "ua"}')
            ]
        ]
    )


def option_choice(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'üòΩ {trl(language, "–†–µ—Å–Ω")}', callback_data='service:eyelashes'),
            ],
            [
                InlineKeyboardButton(text=f'‚ù§Ô∏è {trl(language, "–î–µ–ø")}', callback_data="depilation"),
            ],
            [
                InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–î–µ–π")}', callback_data="first:back"),
            ],
        ]
    )


def service_of_first_choice(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'üëô {trl(language, "–ë–∏–∫–∏–Ω–∏")}', callback_data='service:bikini')
            ],
            [
                InlineKeyboardButton(text=f'ü¶µ {trl(language, "–ù–æ–≥–∏")}', callback_data="service:legs"),
            ],
            [
                InlineKeyboardButton(text=f'üí™ {trl(language, "–†—É–∫–∏")}', callback_data='service:arm')
            ],
            [
                InlineKeyboardButton(text=f'üòå {trl(language, "–õ–∏—Ü–æ")}', callback_data="service:face"),
            ],
            [
                InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–û–ø—Ü")}', callback_data="entry:make"),
            ],
        ]
    )


def choice_month(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'üìÖ {trl(language, "–≠—Ç–æ—Ç–º")} üìÖ', callback_data='month:this_month'),
                InlineKeyboardButton(text=f'‚û°Ô∏è {trl(language, "–°–ª–µ–¥–º")} ‚û°Ô∏è', callback_data="month:next_month"),
            ],
            [
                InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–û–ø—Ü")}', callback_data="entry:make"),
            ],
        ]
    )


def back_to_entry(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–î–µ–π")}', callback_data="first:back"),
            ]
        ]
    )


def delete_or_not(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'‚úÖ {trl(language, "–£–¥–∞–ª")}', callback_data="delete"),
            ],
            [
                InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–≤—ã–±–æ—Ä—É")}', callback_data="my_entry:delete"),
            ]
        ]
    )


def confirm_date(language: bool):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f'‚úÖ {"–¢–∞–∫" if language else "–î–∞"}', callback_data="confirm:yes"),
                InlineKeyboardButton(text=f'‚ùå {"–ù—ñ" if language else "–ù–µ—Ç"}', callback_data="day:back_to_time"),
            ],
        ]
    )


def show_time(client_date: list, language: bool):
    choice_time = InlineKeyboardMarkup(row_width=3)
    # free_space = get_empty_space(client_date)  # get info from SQL, how many cell in day we have
    date = '-'.join(client_date)
    time_list = [10, 12, 14, 16, 18]  # which time client can make entry
    for time_but in time_list:
        # time_but = time_but + 14  # 14 || 15 || 16
        choice_time.insert(InlineKeyboardButton(
            text=f'{time_but}:00', callback_data=f'time:{time_but}'
        )) if cfs(date + f"T{time_but}") else None
    choice_time.row(InlineKeyboardButton(text=f'‚¨ÖÔ∏è{trl(language, "–ù–¥–Ω—è")}', callback_data="service:back"))

    return choice_time  # return Markup


def delete_entry_button(entry_data: list, language: bool):
    delete_entry_markup = InlineKeyboardMarkup(row_width=1)  # add markup
    count = 0
    for i in entry_data:  # ['–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: ', date, time]
        check_data = int(''.join(i[1].split('-')))  # '2022-12-12' -> 20221212
        current = int(current_date())  # current year, month, day -> 20221212
        if check_data >= current:  # if entry not in the past, user can delete it
            text = ' '.join(i)
            text = text.replace('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å") if language else text
            text = text.replace('–í—Ä–µ–º—è', "–ß–∞—Å") if language else text
            delete_entry_markup.insert(InlineKeyboardButton(text=text, callback_data=f"try_delete:{count}"))
        count += 1
    delete_entry_markup.row(InlineKeyboardButton(text=f'‚¨ÖÔ∏è {trl(language, "–ù–î–µ–π")}', callback_data="first:back"))
    return delete_entry_markup
